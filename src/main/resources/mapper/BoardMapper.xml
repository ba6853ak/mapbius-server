<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapbius_server.mapper.BoardMapper">

    <resultMap id="NoticeResultMap" type="com.example.mapbius_server.domain.Board">
        <result column="id" property="boardIdx" />
        <result column="title" property="boardTitle" />
        <result column="content" property="boardContent" />
        <result column="author" property="boardAuthor" />
        <result column="created_date" property="boardCreatedDate" />
    </resultMap>


    <select id="selectBoardUserProfileImage" parameterType="string" resultType="string">
        SELECT profile_image
        FROM users
        WHERE id = #{id};
    </select>

    <!-- 리뷰가 자신의 것인가 -->
    <select id="selectIsOwnReview" resultType="int">
        SELECT
            CASE
                WHEN user_id = #{userId} THEN 1
                ELSE 0
                END AS result
        FROM reviews
        WHERE review_id = #{reviewId}
    </select>

    <!-- 리뷰에 대한 좋아요 개수 조회 -->
    <select id="countLikesByReviewId" resultType="int">
        SELECT COUNT(*)
        FROM review_likes
        WHERE review_id = #{reviewId}
    </select>

    <!-- 리뷰 좋아요 중복 체크 -->
    <select id="selectReviewLikeCheck" resultType="int">
        SELECT COUNT(*)
        FROM review_likes
        WHERE user_id = #{userId} AND review_id = #{reviewId};
    </select>


    <!-- 리뷰 좋아요 추가 -->
    <insert id="insertReviewLike" parameterType="map">
        INSERT INTO review_likes (user_id, review_id)
        VALUES (#{userId}, #{reviewId})
    </insert>

    <!-- 리뷰 좋아요 삭제 -->
    <delete id="deleteReviewLike">
        DELETE FROM review_likes
        WHERE user_id = #{userId} AND review_id = #{reviewId};
    </delete>


    <!-- 후기 삽입 -->
    <insert id="insertReview" parameterType="com.example.mapbius_server.domain.Review">
        INSERT INTO reviews (user_id, phone_number, content, rating)
        VALUES (#{userId}, #{phoneNumber}, #{content}, #{rating})
    </insert>






    <!-- 후기 전체 목록 가져오기 -->
    <select id="getReviews" resultType="map">
        SELECT *
        FROM reviews
        ORDER BY review_date DESC
    </select>

    <!-- 해당 후기 목록 가져오기 -->
    <select id="getSelectReviews" parameterType="string" resultType="map">
        SELECT *
        FROM reviews
        WHERE phone_number = #{phoneNumber}
        ORDER BY review_date DESC
    </select>

    <!-- 가게 ID로 평균 별점과 후기 개수 조회 -->
    <select id="getStoreReviewStats" parameterType="string" resultType="map">
        SELECT
            AVG(rating) AS avgRating,
            COUNT(*) AS reviewCount
        FROM reviews
        WHERE phone_number = #{phoneNumber}
    </select>

<!--  /////////////////////////////////////////////////// -->


    <!-- 아이디로 여행 루트 가져오기 -->
    <select id="findTravelRouteById" resultType="com.example.mapbius_server.domain.TravelRoute">
        SELECT
            cover_image_name AS coverImageName
        FROM travel_routes
        WHERE id = #{id}
    </select>


    <!-- 여행 루트 등록 -->
    <insert id="insertTravelRoute" parameterType="com.example.mapbius_server.domain.TravelRoute">
        INSERT INTO travel_routes (
            creator_id,
            cover_image_name,
            title,
            content,
            created_at,
            is_private,
            location_info,
            distances
        ) VALUES (
                     #{creatorId},
                     #{coverImageName},
                     #{title},
                     #{content},
                     NOW(),
                     #{isPrivate},
                     #{locationInfo},
                     #{distances}
                 );
    </insert>

    <!-- 여행 루트 수정 -->
    <!-- 성공 시 1 반환 / 실패 시 0 반환 -->
    <update id="updateTravelRoute" parameterType="com.example.mapbius_server.domain.TravelRoute">
        UPDATE travel_routes
        SET title = #{title},
            content = #{content},
            cover_image_name = CASE
                                   WHEN #{coverImageName} IS NOT NULL THEN #{coverImageName}
                                   ELSE cover_image_name
                END,
            is_private = #{isPrivate},
            location_info = #{locationInfo}
        WHERE id = #{id};
    </update>

    <!-- 여행 루트 삭제 -->
    <!-- 성공 시 1 반환 / 실패 시 0 반환 -->
    <delete id="deleteTravelRoute" parameterType="long">
            UPDATE travel_routes
            SET is_deleted = TRUE
            WHERE id = #{id};
    </delete>

    <!-- 모든 사용자 여행 루트 져오기 -->
    <select id="getCompleteTravelRoutes" resultType="com.example.mapbius_server.domain.TravelRoute">
        SELECT
        tr.id,
        tr.creator_id AS creatorId,
        u.nick_name AS creatorNickName,
        tr.cover_image_name AS coverImageName,
        tr.title,
        tr.content,
        tr.created_at AS createdAt,
        tr.is_private AS isPrivate,
        tr.location_info AS locationInfo,
        tr.distances AS distances,
        IFNULL(like_count.like_count, 0) AS heartCount  <!-- 좋아요 개수 -->
        FROM travel_routes tr
        LEFT JOIN users u ON tr.creator_id = u.id
        LEFT JOIN (
        SELECT route_id, COUNT(*) AS like_count
        FROM route_likes
        GROUP BY route_id
        ) AS like_count ON tr.id = like_count.route_id  <!-- 각 루트의 좋아요 개수 -->
        WHERE tr.is_deleted = 0 AND tr.is_private = 0
        ORDER BY tr.created_at DESC;
    </select>

    <!-- 사용자 개인 여행 루트 목록 가져오기 -->
    <select id="getTravelRoutes" resultType="com.example.mapbius_server.domain.TravelRoute">
        SELECT
        tr.id,
        tr.creator_id AS creatorId,
        u.nick_name AS creatorNickName,
        tr.cover_image_name AS coverImageName,
        tr.title,
        tr.content,
        tr.created_at AS createdAt,
        tr.is_private AS isPrivate,
        tr.location_info AS locationInfo,
        tr.distances AS distances,
        CASE
        WHEN rl.user_id IS NOT NULL THEN 1
        ELSE 0
        END AS isLiked,  <!-- 사용자가 좋아요를 누른 경우 1, 아니면 0 -->
        CASE
        WHEN tr.creator_id = #{creatorId} THEN 1
        ELSE 0
        END AS isOwnRoute,  <!-- 사용자가 작성한 루트인지 확인 -->
        IFNULL(like_count.like_count, 0) AS heartCount  <!-- 좋아요 개수 -->
        FROM travel_routes tr
        LEFT JOIN users u ON tr.creator_id = u.id
        LEFT JOIN route_likes rl ON tr.id = rl.route_id AND rl.user_id = #{creatorId}  <!-- 좋아요 여부 확인 -->
        LEFT JOIN (
        SELECT route_id, COUNT(*) AS like_count
        FROM route_likes
        GROUP BY route_id
        ) AS like_count ON tr.id = like_count.route_id  <!-- 각 루트의 좋아요 개수 -->
        WHERE tr.is_deleted = 0
        AND (tr.creator_id = #{creatorId} OR rl.user_id = #{creatorId})  <!-- 자신이 작성한 루트 또는 좋아요를 누른 루트만 가져옴 -->
        ORDER BY tr.created_at DESC;
    </select>


    <!-- 여행 루트 개별 가져오기 -->
    <select id="getTravelRouteById" parameterType="long" resultType="com.example.mapbius_server.domain.TravelRoute">
        SELECT
            tr.id,
            tr.creator_id AS creatorId,
            u.nick_name AS creatorNickName,  -- 작성자의 닉네임 추가
            tr.cover_image_name AS coverImageName,
            tr.title,
            tr.content,
            tr.created_at AS createdAt,
            tr.is_private AS isPrivate,
            tr.location_info AS locationInfo,
            tr.distances AS distances
        FROM travel_routes tr
                 LEFT JOIN users u ON tr.creator_id = u.id  -- users 테이블과 조인
        WHERE tr.id = #{id};
    </select>



    <!-- 구분선///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->

    <!-- 공지사항 등록 -->
    <insert id="insertNotice" parameterType="com.example.mapbius_server.domain.Board">
        INSERT INTO notices (title, content, author, created_date)
        VALUES (#{boardTitle}, #{boardContent}, #{boardAuthor}, NOW());
    </insert>

    <!-- 공지사항 수정 -->
    <!-- 성공 시 1 반환 / 실패 시 0 반환 -->
    <update id="updateNotice" >
        UPDATE notices
        SET title = #{boardTitle},
            content = #{boardContent}
        WHERE id = #{boardIdx};
    </update>

    <!-- 공지사항 삭제 -->
    <!-- 성공 시 1 반환 / 실패 시 0 반환 -->
    <delete id="deleteNotice">
        DELETE FROM notices WHERE id = #{id};
    </delete>

<!--    &lt;!&ndash; 공지사항 목록 조회 (페이지네이션 포함) &ndash;&gt;
    <select id="selectNotices" resultType="map" >
        SELECT *
        FROM notices
        ORDER BY created_date DESC
            LIMIT #{size} OFFSET #{offset};
    </select>-->

    <!-- 공지사항 목록 조회 -->
    <select id="selectNotices" resultType="map">
        SELECT * FROM notices ORDER BY id DESC LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 제목으로 검색 -->
    <select id="selectNoticesByTitle" resultType="map">
        SELECT * FROM notices
        WHERE title LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY id DESC
            LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 내용으로 검색 -->
    <select id="selectNoticesByContent" resultType="map">
        SELECT * FROM notices
        WHERE content LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY id DESC
            LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 전체 공지사항 수 조회 -->
    <select id="selectNoticeCount" resultType="int">
        SELECT COUNT(*) FROM notices
    </select>

    <!-- 제목 또는 내용으로 검색 -->
    <select id="selectNoticesByTitleOrContent" resultType="map">
        SELECT * FROM notices
        WHERE title LIKE CONCAT('%', #{keyword}, '%')
           OR content LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY id DESC
            LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 검색 조건에 따른 공지사항 수 조회 -->
    <select id="selectNoticeCountByKeyword" resultType="int">
        SELECT COUNT(*)
        FROM notices
        <where>
            <if test="type == 'title'">
                title LIKE CONCAT('%', #{keyword}, '%')
            </if>
            <if test="type == 'content'">
                content LIKE CONCAT('%', #{keyword}, '%')
            </if>
            <if test="type == null">
                title LIKE CONCAT('%', #{keyword}, '%')
                OR content LIKE CONCAT('%', #{keyword}, '%')
            </if>
        </where>
    </select>


    <!-- 사용자 ID로 닉네임 조회 -->
    <select id="selectUserIdToUserNm" resultType="string">
        SELECT nick_name
        FROM users
        WHERE id = #{userId}
    </select>

    <!-- 공지사항 게시글 상세보기 가져오기 -->
    <select id="selectNoticeDetail" parameterType="int" resultMap="NoticeResultMap" resultType="com.example.mapbius_server.domain.Board">
        SELECT id, title, content, author, created_date from notices where id = #{id};
    </select>




</mapper>
