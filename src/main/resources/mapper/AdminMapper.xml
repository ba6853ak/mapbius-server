<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapbius_server.mapper.AdminMapper">

    <insert id="insertRoleAdmin">
        INSERT INTO admin_users (user_id) VALUES (#{id})
    </insert>

    <insert id="insertOrDeleteRoleAdmin">
        <choose>
            <when test="(select count(*) from admin_users where user_id = #{id}) > 0">
                DELETE FROM admin_users WHERE user_id = #{id};
            </when>
            <otherwise>
                INSERT INTO admin_users (user_id) VALUES (#{id});
            </otherwise>
        </choose>
    </insert>

    <delete id="deleteRoleAdmin">
        DELETE FROM admin_users WHERE user_id = #{id}
    </delete>

    <update id="updateActivateAccount">
        UPDATE users
        SET is_deleted = is_deleted ^ 1
        WHERE id = #{id};
    </update>

    <update id="updateDeActivateAccount">
        UPDATE users
        SET is_deleted = 1
        WHERE id = #{id} and is_deleted = 0;
    </update>


    <!-- ID 존재 여부 확인 -->
    <select id="existsAdminUser" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM admin_users
        WHERE user_id = #{id}
    </select>

    <!-- ID 삭제 -->
    <delete id="deleteAdminUser">
        DELETE FROM admin_users WHERE user_id = #{id}
    </delete>

    <!-- ID 삽입 -->
    <insert id="insertAdminUser">
        INSERT INTO admin_users (user_id) VALUES (#{id})
    </insert>



    <!-- 전체 사용자 정보 조회 -->
    <select id="getAllUsers" resultType="map">
        SELECT
            u.profile_image,
            u.nick_name,
            u.id,
            u.email,
            u.birth_date,
            u.created_at,
            -- 가장 최근 로그인 기록의 created_at (최신 로그인 시간)
            IFNULL(MAX(l.created_at), '0000-00-00 00:00:00') AS last_login_date,
            u.gender,
            CASE
                WHEN u.is_deleted = 0 THEN 'activate'
                ELSE 'deactivate'
                END AS account_status,
            CASE
                WHEN a.user_id IS NOT NULL THEN 'admin'
                ELSE 'normal'
                END AS role,
            -- 작성한 후기의 개수
            IFNULL(COUNT(r.review_id), 0) AS review_count,
            -- 작성한 후기의 별점 평균 (NULL이면 0.0으로 처리, 소수 첫째 자리까지 고정)
            IFNULL(ROUND(AVG(r.rating), 1), 0.0) AS avg_rating
        FROM users u
                 LEFT JOIN admin_users a ON u.id = a.user_id
                 LEFT JOIN reviews r ON u.id = r.user_id
                 LEFT JOIN login_logs l ON u.id = l.user_id -- login_logs와 조인하여 최신 로그인 기록을 가져옵니다
        GROUP BY u.id, u.profile_image, u.nick_name, u.email, u.birth_date, u.gender, u.is_deleted, a.user_id
        ORDER BY u.created_at DESC;
    </select>


<!--    <select id="getAllUsers" resultType="map">
        SELECT
            u.profile_image,
            u.nick_name,
            u.id,
            u.email,
            u.birth_date,
            u.created_at,
            u.gender,
            CASE
                WHEN u.is_deleted = 0 THEN 'activate'
                ELSE 'deactivate'
                END AS account_status,
            CASE
                WHEN a.user_id IS NOT NULL THEN 'admin'
                ELSE 'normal'
                END AS role,
            &#45;&#45; 작성한 후기의 개수
            IFNULL(COUNT(r.review_id), 0) AS review_count,
            &#45;&#45; 작성한 후기의 별점 평균 (NULL이면 0.0으로 처리, 소수 첫째 자리까지 고정)
            IFNULL(ROUND(AVG(r.rating), 1), 0.0) AS avg_rating
        FROM users u
                 LEFT JOIN admin_users a ON u.id = a.user_id
                 LEFT JOIN reviews r ON u.id = r.user_id
        GROUP BY u.id, u.profile_image, u.nick_name, u.email, u.birth_date, u.created_at, u.gender, u.is_deleted, a.user_id
        ORDER BY u.created_at DESC;
    </select>-->



<!--    <select id="getAllUsers" resultType="map">
        SELECT
            u.profile_image,
            u.nick_name,
            u.id,
            u.email,
            u.birth_date,
            u.created_at,
            u.gender,
            CASE
                WHEN u.is_deleted = 0 THEN 'activate'
                ELSE 'deactivate'
                END AS account_status,
            CASE
                WHEN a.user_id IS NOT NULL THEN 'admin'
                ELSE 'normal'
                END AS role
        FROM users u
                 LEFT JOIN admin_users a ON u.id = a.user_id
        ORDER BY u.created_at DESC;
    </select>-->



</mapper>